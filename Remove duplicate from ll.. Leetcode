#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode* next;
};

// Function to remove duplicates from a sorted list
struct ListNode* deleteDuplicates(struct ListNode* head) {
    struct ListNode* current = head;

    // Traverse the list
    while (current != NULL && current->next != NULL) {
        if (current->val == current->next->val) {
            // Skip the duplicate node
            struct ListNode* temp = current->next;
            current->next = current->next->next;
            free(temp);  // Free the memory of the duplicate node
        } else {
            current = current->next;  // Move to the next node
        }
    }

    return head;
}

// Helper function to create a new node
struct ListNode* createNode(int val) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = val;
    newNode->next = NULL;
    return newNode;
}

// Helper function to print the linked list
void printList(struct ListNode* head) {
    while (head != NULL) {
        printf("%d -> ", head->val);
        head = head->next;
    }
    printf("NULL\n");
}

// Main function to test the deleteDuplicates function
int main() {
    // Creating a sample sorted linked list: 1 -> 1 -> 2 -> 3 -> 3 -> NULL
    struct ListNode* head = createNode(1);
    head->next = createNode(1);
    head->next->next = createNode(2);
    head->next->next->next = createNode(3);
    head->next->next->next->next = createNode(3);

    // Print the original list
    printf("Original List: ");
    printList(head);

    // Remove duplicates
    head = deleteDuplicates(head);

    // Print the modified list
    printf("List After Removing Duplicates: ");
    printList(head);

    return 0;
}
